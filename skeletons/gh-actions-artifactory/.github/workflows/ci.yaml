name: Build and Tag Image

env:
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_NAMESPACE: ${{ secrets.REGISTRY_NAMESPACE }}
  APP_NAME:  ${{ github.event.repository.name }}

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "mkdocs.yaml"

jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@v1.2.0
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4.1.0
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME_LATEST: ${{ env.REGISTRY_URL}}/${{ env.REGISTRY_NAMESPACE }}/${{ env.APP_NAME }}:latest
          IMAGE_NAME_TAG: ${{ env.REGISTRY_URL}}/${{ env.REGISTRY_NAMESPACE }}/${{ env.APP_NAME }}:${{ github.run_number }}
        run: |
          jf docker build -t $IMAGE_NAME_LATEST .
          jf docker push $IMAGE_NAME_LATEST
          jf docker build -t $IMAGE_NAME_TAG .
          jf docker push $IMAGE_NAME_TAG

      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: ${{ github.event.repository.name }}-build
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build number
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish