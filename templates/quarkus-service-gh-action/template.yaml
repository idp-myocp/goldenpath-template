apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: quarkus-service-github-actions
  title: Quarkus Service with ArgoCD and GitHub Action Pipeline
  description: Create a simple microservice using Quarkus with ArgoCD and GitHub Action
  tags:
    - java
    - quarkus
    - maven
    - ghaction
spec:
  owner: janus-authors
  system: janus-idp
  type: service

  parameters:
    - title: Provide information about the new component
      required:
        - githubOrg
        - repoName
        - owner
        - system
        - port
      properties:
        githubOrg:
          title: GitHub Organization
          type: string
          default: idp-myocp
        repoName:
          title: Repository Name
          type: string
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        owner:
          title: Owner
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
        system:
          title: System
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - System
        port:
          title: Port
          type: number
          default: 8080
          description: Override the port exposed for the application
    - title: Provide information about the Java metadata
      required:
        - groupId
        - artifactId
        - javaPackageName
      properties:
        groupId:
          title: Group ID
          type: string
          default: io.janus
          description: Maven Group ID eg (io.janus)
        artifactId:
          title: Artifact ID
          type: string
          default: quarkusapp
          description: Maven Artifact ID
        javaPackageName:
          title: Java Package Namespace
          type: string
          default: io/janus/quarkusapp
          description: Name for the Java Package (ensure to use the / character as this is used for folder structure) should match Group ID and Artifact ID
    - title: Provide information about the Continuous Integration
      required:
        - ci
        - repoUrl
      properties:
        ci:
          title: Continuous Integration
          type: string
          description: This action will create a CI pipeline for your application based on GitHub Action
          default: GitHub Action
        image_registry:
          title: Image Registry
          type: string
          description: The image registry where the image will be store
          enum:
            - Nexus
          enumNames: 
            - Nexus
        image_host:
          title: Registry Host
          type: string
          description: The url for the image registry
          default: registry-nexus.apps.home.myocp.net:443

        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          githubOrg: ${{ parameters.githubOrg }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          applicationType: service
          description: ${{ parameters.description }}
          namespace: ${{ parameters.namespace }}
          imageUrl: ${{ parameters.imageUrl }}
          imageBuilder: s2i-java
          imageRepository: ${{ parameters.imageRepository }}
          port: ${{ parameters.port }}
          cluster: .apps.home.myocp.net
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          javaPackageName: ${{ parameters.javaPackageName }}

    - id: ciTemplate
      name: Generating the CI Component
      action: fetch:template
      input:
        url: ../../skeletons/gh-actions-nexus/
        copyWithoutTemplating:
          - .github/workflows/
        values:
          repoName: ${{ parameters.repoName }}

    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.githubOrg }}&repo=${{ parameters.repoName }}
        defaultBranch: main
        repoVisibility: public
        protectDefaultBranch: false
  
    - id: sleep
      name: sleep 2 seconds
      action: roadiehq:utils:sleep
      input:
        path: 2
        amount: 2
    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating: []
        values:
          component_id: ${{ parameters.repoName }}
          description: ${{ parameters.description }}
          destination: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops
          source_repository: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}
          repository_name: ${{ (parameters.repoUrl | parseRepoUrl).repo }}
          git_owner: ${{ (parameters.repoUrl | parseRepoUrl).owner }}
          cluster: .apps.home.myocp.net
          namespace: ${{ parameters.repoName }}-dev
          image_registry: ${{ parameters.image_registry }}
          image_host: ${{ parameters.image_host }}
          image_organization: docker
          image_name: ${{ parameters.repoName }}
          port: 8080
          deployment_name: quarkus-template
        targetPath: ./tenant-gitops

    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:github
      input:
        repoUrl: github.com?repo=${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops&owner=${{ (parameters.repoUrl | parseRepoUrl).owner }}
        title: gitops resources for ${{ parameters.repoName }}
        description: gitops resources for ${{ parameters.repoName }}
        sourcePath: ./tenant-gitops
        repoVisibility: public
        protectDefaultBranch: false

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.repoName }}-bootstrap
        argoInstance: main
        namespace: openshift-gitops
        repoUrl: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops.git
        path: 'argocd/'
  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}